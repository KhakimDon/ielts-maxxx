import { buildApiUrl, env } from "./env";

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
interface LoginResponse {
  access: string;
  refresh: string;
}

interface UserData {
  id: number;
  first_name: string;
  last_name: string;
  email: string;
  phone_number: string;
}

interface RefreshResponse {
  access: string;
}

interface ConfirmPhoneResponse {
  access: string;
  refresh: string;
}

interface BookData {
  id: number;
  title: string;
  slug: string;
  is_purchased: boolean;
}

interface BookReadResponse {
  // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API BookRead
  // –ü–æ–∫–∞ —á—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ any, –ø–æ–∫–∞ –Ω–µ —É–≤–∏–¥–∏–º —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
  [key: string]: any;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function getUserData(accessToken: string): Promise<UserData> {
  try {
    const res = await fetch(buildApiUrl(env.PROFILE_ENDPOINT), {
      method: "GET",
      headers: {
        "Authorization": `Bearer ${accessToken}`,
        "Accept": "application/json",
        "X-CSRFTOKEN": env.CSRF_TOKEN,
      },
    });

    if (!res.ok) {
      const errorText = await res.text();
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", errorText);
      throw new Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
    }

    const responseData = await res.json();
    console.log("üì° API Response - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", responseData);
    
    // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    const userData = Array.isArray(responseData) ? responseData[0] : responseData;
    
    if (!userData) {
      throw new Error("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
    }
    
    console.log("üë§ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userData);
    
    return userData;
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err);
    throw err;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
export async function refreshToken(refreshToken: string): Promise<RefreshResponse> {
  try {
    const res = await fetch(buildApiUrl(env.REFRESH_ENDPOINT), {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json",
      },
      body: JSON.stringify({
        refresh: refreshToken,
      }),
    });

    if (!res.ok) {
      throw new Error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞");
    }

    return await res.json();
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", err);
    throw err;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function loginUser(phone: string, password: string): Promise<LoginResponse> {
  try {
    // –£–±–∏—Ä–∞–µ–º +998 –∏–ª–∏ 998 –∏–∑ –Ω–∞—á–∞–ª–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –±—ç–∫–µ–Ω–¥–∞
    const cleanPhone = phone.replace(/^(\+998|998)/, '');
    
    const res = await fetch(buildApiUrl(env.LOGIN_ENDPOINT), {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json", 
      },
      body: JSON.stringify({
        phone_number: cleanPhone,
        password,
      }),
    });

    if (!res.ok) {
      const errorData = await res.json().catch(() => ({}));
      throw new Error(errorData.detail || "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
    }

    return await res.json();
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞:", err);
    throw err;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è OTP –∫–æ–¥–∞
export async function confirmPhone(phone: string, code: string): Promise<ConfirmPhoneResponse> {
  try {
    console.log("üì± –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ OTP –¥–ª—è –Ω–æ–º–µ—Ä–∞:", phone, "–∫–æ–¥:", code);
    
    const res = await fetch(buildApiUrl(env.CONFIRM_PHONE_ENDPOINT), {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json",
        "X-CSRFTOKEN": env.CSRF_TOKEN,
      },
      body: JSON.stringify({
        phone_number: phone,
        code: code,
      }),
    });

    const responseData = await res.json();
    console.log("üì° API Response - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ OTP:", responseData);

    if (!res.ok) {
      throw new Error(responseData.message || "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è");
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ localStorage
    if (responseData.access && responseData.refresh) {
      localStorage.setItem("access_token", responseData.access);
      localStorage.setItem("refresh_token", responseData.refresh);
      console.log("‚úÖ –¢–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage");
    }

    return responseData;
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è OTP:", err);
    throw err;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥
export async function getBookList(accessToken: string): Promise<BookData[]> {
  try {
    const res = await fetch(buildApiUrl('/main/book/BookList/'), {
      method: "GET",
      headers: {
        "Authorization": `Bearer ${accessToken}`,
        "Accept": "application/json",
        "X-CSRFTOKEN": env.CSRF_TOKEN,
      },
    });

    if (!res.ok) {
      const errorText = await res.text();
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥:", errorText);
      throw new Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥");
    }

    const responseData = await res.json();
    console.log("üìö API Response - –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥:", responseData);
    
    return responseData;
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥:", err);
    throw err;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥–∏ –ø–æ slug –¥–ª—è —á—Ç–µ–Ω–∏—è
export async function getBookRead(accessToken: string, slug: string): Promise<BookReadResponse> {
  try {
    const res = await fetch(buildApiUrl(`/main/book/${slug}/BookRead/`), {
      method: "GET",
      headers: {
        "Authorization": `Bearer ${accessToken}`,
        "Accept": "application/json",
        "X-CSRFTOKEN": env.CSRF_TOKEN,
      },
    });

    if (!res.ok) {
      const errorText = await res.text();
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è:", errorText);
      throw new Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è");
    }

    const responseData = await res.json();
    console.log("üìñ API Response - –ö–Ω–∏–≥–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è:", responseData);
    
    return responseData;
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è:", err);
    throw err;
  }
}
