"use client";

import { useState, useRef, useEffect } from "react";
import { X } from "lucide-react";

interface OTPModalProps {
  isOpen: boolean;
  onClose: () => void;
  onVerify: (otp: string) => void;
  phone: string;
}

export default function OTPModal({ isOpen, onClose, onVerify, phone }: OTPModalProps) {
  const [otp, setOtp] = useState(["", "", "", ""]);
  const [isLoading, setIsLoading] = useState(false);
  const inputRefs = useRef<(HTMLInputElement | null)[]>([]);

  useEffect(() => {
    console.log("üîç OTP Modal useEffect - isOpen:", isOpen);
    if (isOpen) {
      console.log("üîç OTP Modal –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è!");
      setOtp(["", "", "", ""]);
      setIsLoading(false);
      // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–º –∏–Ω–ø—É—Ç–µ
      setTimeout(() => {
        inputRefs.current[0]?.focus();
      }, 100);
    }
  }, [isOpen]);

  const handleInputChange = (index: number, value: string) => {
    // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    if (!/^\d*$/.test(value)) return;

    const newOtp = [...otp];
    newOtp[index] = value;
    setOtp(newOtp);

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–Ω–ø—É—Ç—É
    if (value && index < 3) {
      inputRefs.current[index + 1]?.focus();
    }

    // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    if (newOtp.every(digit => digit !== "") && newOtp.join("").length === 4) {
      handleVerify(newOtp.join(""));
    }
  };

  const handleKeyDown = (index: number, e: React.KeyboardEvent) => {
    // –£–¥–∞–ª–µ–Ω–∏–µ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –∏–Ω–ø—É—Ç—É
    if (e.key === "Backspace" && !otp[index] && index > 0) {
      inputRefs.current[index - 1]?.focus();
    }
  };

  const handlePaste = (e: React.ClipboardEvent) => {
    e.preventDefault();
    const pastedData = e.clipboardData.getData("text").replace(/\D/g, "").slice(0, 4);
    const newOtp = [...otp];
    
    for (let i = 0; i < pastedData.length && i < 4; i++) {
      newOtp[i] = pastedData[i];
    }
    
    setOtp(newOtp);
    
    // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–º –ø–æ–ª–µ
    const lastFilledIndex = Math.min(pastedData.length - 1, 3);
    inputRefs.current[lastFilledIndex]?.focus();
  };

  const handleVerify = async (otpCode?: string) => {
    const code = otpCode || otp.join("");
    if (code.length !== 4) return;

    setIsLoading(true);
    try {
      await onVerify(code);
    } finally {
      setIsLoading(false);
    }
  };

  const handleResend = () => {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ OTP
    console.log("Resend OTP");
  };

  console.log("üîç OTP Modal render - isOpen:", isOpen, "phone:", phone);
  
  if (!isOpen) {
    console.log("üîç OTP Modal –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è - isOpen = false");
    return null;
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-2xl p-6 w-full max-w-md relative">
        <button
          onClick={onClose}
          className="absolute top-4 right-4 text-gray-400 hover:text-gray-600 transition-colors"
        >
          <X size={24} />
        </button>

        <div className="text-center mb-6">
          <h2 className="text-2xl font-bold text-gray-900 mb-2">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞</h2>
          <p className="text-gray-600">
            –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ –Ω–æ–º–µ—Ä
          </p>
          <p className="text-gray-900 font-medium">+998 {phone}</p>
        </div>

        <div className="flex justify-center gap-3 mb-6">
          {otp.map((digit, index) => (
            <input
              key={index}
              ref={(el) => {
                inputRefs.current[index] = el;
              }}
              type="text"
              inputMode="numeric"
              maxLength={1}
              value={digit}
              onChange={(e) => handleInputChange(index, e.target.value)}
              onKeyDown={(e) => handleKeyDown(index, e)}
              onPaste={handlePaste}
              className="w-12 h-12 text-center text-xl font-bold border-2 border-gray-300 rounded-lg focus:border-[#fca311] focus:outline-none transition-colors text-black"
              disabled={isLoading}
            />
          ))}
        </div>

        <button
          onClick={() => handleVerify()}
          disabled={otp.join("").length !== 4 || isLoading}
          className="w-full bg-[#fca311] text-white py-3 rounded-lg font-medium disabled:opacity-50 disabled:cursor-not-allowed hover:bg-[#e6940f] transition-colors mb-4"
        >
          {isLoading ? "–ü—Ä–æ–≤–µ—Ä–∫–∞..." : "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"}
        </button>

        <div className="text-center">
          <button
            onClick={handleResend}
            className="text-[#fca311] hover:text-[#e6940f] transition-colors text-sm"
            disabled={isLoading}
          >
            –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ
          </button>
        </div>
      </div>
    </div>
  );
}
